package com.moodle.server.controllers;

import com.moodle.server.models.Group;
import com.moodle.server.services.DownloadService;
import com.moodle.server.services.GroupService;
import com.moodle.server.services.UserService;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.IOException;
import java.util.Map;

@Controller
public class GroupsController {
    private final GroupService groupService;
    private final DownloadService downloadService;
    private final UserService userService;

    public GroupsController(GroupService groupService,
                            UserService userService,
                            DownloadService downloadService) {
        this.groupService = groupService;
        this.userService = userService;
        this.downloadService = downloadService;
    }

    @GetMapping("/groups")
    public String homePage(Map<String, Object> model) {
        model.put("listGroups", groupService.findAll());
        return "groups";
    }

    @GetMapping("/group")
    public String homePage(@RequestParam Long groupId,
                           Map<String, Object> model) {
        model.put("listStudents", userService.findByGroupId(groupId));
        model.put("group", groupService.findById(groupId));
        return "group";
    }

    @PostMapping("/create-group")
    public String createGroup(@RequestParam String groupNumber,
                              @RequestParam String shortDescription) {
        groupService.saveGroup(
                new Group(
                        groupNumber,
                        shortDescription
                )
        );
        return "redirect:/groups";
    }

    @PostMapping("/new-auto-group")
    public String createNewAutoGeneratedGroup(@RequestParam String groupNumber,
                                              @RequestParam String shortDescription,
                                              @RequestParam Integer studentsCount) {
        userService.generateUsers(
                studentsCount,
                groupService.saveGroup(
                        new Group(
                                groupNumber,
                                shortDescription
                        )
                )
        );
        return "redirect:/groups";
    }

    @PostMapping("/delete-group")
    public String deleteGroup(@RequestParam Long groupId) {
        userService.deleteUsersByGroupId(groupId);
        groupService.deleteGroupById(groupId);
        return "redirect:/groups";
    }

    @GetMapping("/download-group-list")
    @ResponseBody
    public ResponseEntity<InputStreamResource> getImageDynamicType(@RequestParam Long groupId) throws IOException {
        MediaType contentType = MediaType.APPLICATION_OCTET_STREAM;
        return ResponseEntity.ok()
                .contentType(contentType)
                .header("Content-Disposition",
                        "attachment;filename=group-list-" + groupId.toString() + ".txt"
                ).body(
                        new InputStreamResource(
                                downloadService.downloadUsersFromGroupList(
                                        groupId,
                                        userService.findByGroupId(groupId)
                                )
                        )
                );
    }
}
